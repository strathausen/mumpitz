// Generated by CoffeeScript 1.9.3

/*

Mumpitz - all the blog engine you will ever need

@author Johann Philipp Strathausen <strathausen@gmail.com>
 */
var DOCEXT, Mumpitz, _, async, defaultTo, es, fs, intercept, moment, path, schnauzer, yamlmd;

require('coffee-script');

_ = require('underscore');

fs = require('fs');

path = require('path');

async = require('async');

es = require('event-stream');

moment = require('moment');

yamlmd = require('yamlmd');

schnauzer = require('schnauzer');

defaultTo = require('./plugins/defaultTo');

intercept = require('./plugins/intercept');

DOCEXT = /\.(md|markdown|yamlmd)$/;

Mumpitz = (function() {
  module.exports = Mumpitz;

  function Mumpitz(properties) {
    var MumpitzBlog;
    if (!properties.dir) {
      throw new Error('please specify "dir" where your articles are');
    }
    this.blog = new (MumpitzBlog = (function() {
      function MumpitzBlog() {}

      return MumpitzBlog;

    })());
    _.defaults(this.blog, properties);
    _.defaults(this.blog, {
      template: path.join(__dirname, 'example/theme/article.hbs')
    });
  }

  Mumpitz.prototype.documents = [];

  Mumpitz.prototype.go = function(cb) {
    var waiters;
    waiters = [];
    return fs.readdir(this.blog.dir, (function(_this) {
      return function(err, docs) {
        if (err) {
          return cb(err);
        }
        return async.forEach(docs, (function(doc, cb) {
          var docName, outDir, outDoc, readStream, writeStream;
          if (!DOCEXT.test(doc)) {
            return cb();
          }
          docName = doc.replace(DOCEXT, '');
          outDir = _this.blog["public"] || _this.blog.dir;
          outDoc = docName + (!/^.+\.[\w]+$/.test(docName) ? '.html' : '');
          readStream = fs.createReadStream(path.join(_this.blog.dir, doc));
          writeStream = fs.createWriteStream(path.join(outDir, outDoc));
          return readStream.pipe(es.join('')).pipe(yamlmd.stream()).pipe(defaultTo(_this.blog)).pipe(defaultTo({
            id: docName
          })).pipe(intercept(function(item) {
            return _this.documents.push(item);
          })).pipe(es.map(function(item, next) {
            waiters.push(function() {
              return next(null, item);
            });
            return cb();
          })).pipe(schnauzer.stream()).pipe(writeStream);
        }), function() {
          _this.documents = _.sortBy(_this.documents, function(doc) {
            if (doc.date == null) {
              return 0;
            }
            return -moment(doc.date, 'MMM Do, YYYY').unix();
          });
          _this.documents.forEach(function(doc) {
            return doc.documents = _this.documents;
          });
          waiters.forEach(function(f) {
            return f();
          });
          return cb();
        });
      };
    })(this));
  };

  return Mumpitz;

})();
